// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// prisma generate ------ whenever I change schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  url               = env("DATABASE_URL")
  provider          = "mysql"
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// ----------- NextAuth default schema

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  programs      Program[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ------------- App schema

model Program {
  id       String   @id @default(cuid()) @unique
  name     String
  numDays  Int
  user     User?    @relation(fields: [userId], references: [id])
  userId   String?
  days     Day[]
  isActive Boolean? @default(false)
}

model Day {
  id        String     @id @default(cuid()) @unique
  name      String?
  exercises Exercise[]
  program   Program    @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId String
}

model Exercise {
  id    String  @id @default(cuid())
  name  String
  sets  Set[]
  day   Day?    @relation(fields: [dayId], references: [id])
  dayId String?
}

model Set {
  id         String    @id @default(cuid())
  Exercise   Exercise? @relation(fields: [exerciseId], references: [id])
  exerciseId String?
  weight     Int
  reps       Int
}
